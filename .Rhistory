print(train)
---
title: "Pig Data"
```{r}
print(train)
head(train)
colSums(is.na(data))
# Vérifier les valeurs manquantes
sum(is.na(data))
colSums(is.na(data))
colSums(is.na(train))
# Vérifier les valeurs manquantes
sum(is.na(train))
colSums(is.na(train))
boxplot(Weight ~ Farm; data = train, main = "Distribution des poids par ferme")
boxplot(Weight ~ Farm, data = train, main = "Distribution des poids par ferme")
library(ggplot2)
ggplot(data, aes(x = poids, fill = ferme)) +
geom_histogram(position = "dodge", bins = 20) +
labs(title = "Distribution du poids des cochons par ferme", x = "Poids", y = "Fréquence") +
theme_minimal()
ggplot(train, aes(x = Weight, fill = Farm)) +
geom_histogram(position = "dodge", bins = 20) +
labs(title = "Distribution du poids des cochons par ferme", x = "Poids", y = "Fréquence") +
theme_minimal()
ggplot(train, aes(x = Weight, fill = Farm)) +
geom_histogram(position = "dodge", bins = 20, color = 'blue') +
labs(title = "Distribution du poids des cochons par ferme", x = "Poids", y = "Fréquence") +
theme_minimal()
ggplot(train, aes(x = Weight, fill = Farm)) +
geom_histogram(position = "dodge", bins = 20) +
labs(title = "Distribution du poids des cochons par ferme", x = "Poids", y = "Fréquence") +
theme_minimal()
ggplot(train, Weight +
m
library(ggplot2)
ggplot(train, aes(x = Weight, fill = Farm) +
geom_histogram(position = "dodge", bins = 20) +
labs(title = "Distribution du poids des cochons par ferme", x = "Poids", y = "Fréquence") +
theme_minimal()
ggplot(train, aes(x = Weight, fill = Farm)) +
geom_histogram(position = "dodge", bins = 20) +
labs(title = "Distribution du poids des cochons par ferme", x = "Poids", y = "Fréquence") +
theme_minimal()
# Tracer les courbes de croissance
ggplot(mean_weight, aes(x = Age, y = moyenne_poids, color = Farm)) +
geom_line() +
geom_point() +
labs(title = "Courbe de croissance des cochons par ferme", x = "Semaine", y = "Poids moyen") +
theme_minimal()
# Calculer la moyenne par semaine et par ferme
library(dplyr)
mean_weight <- train %>%
group_by(Farm, Age) %>%
summarise(moyenne_poids = mean(Weight, na.rm = TRUE))
# Tracer les courbes de croissance
ggplot(mean_weight, aes(x = Age, y = moyenne_poids, color = Farm)) +
geom_line() +
geom_point() +
labs(title = "Courbe de croissance des cochons par ferme", x = "Semaine", y = "Poids moyen") +
theme_minimal()
# Tracer les courbes de croissance avec des couleurs personnalisées
ggplot(mean_weight, aes(x = Age, y = moyenne_poids, color = Farm)) +
geom_line() +
geom_point() +
scale_color_manual(values = ferme_colors) +  # Utilise les couleurs définies
labs(title = "Courbe de croissance des cochons par ferme", x = "Semaine", y = "Poids moyen") +
theme_minimal()
# Calculer la moyenne par semaine et par ferme
library(dplyr)
# Calculer la moyenne du poids par semaine et par ferme
mean_weight <- train %>%
group_by(Farm, Age) %>%
summarise(moyenne_poids = mean(Weight, na.rm = TRUE))
# Choisir des couleurs bien distinctes pour chaque ferme
ferme_colors <- c("red", "blue", "green", "purple", "orange", "brown", "pink")  # Une couleur par ferme
# Tracer les courbes de croissance avec des couleurs personnalisées
ggplot(mean_weight, aes(x = Age, y = moyenne_poids, color = Farm)) +
geom_line() +
geom_point() +
scale_color_manual(values = ferme_colors) +  # Utilise les couleurs définies
labs(title = "Courbe de croissance des cochons par ferme", x = "Semaine", y = "Poids moyen") +
theme_minimal()
# Charger les bibliothèques nécessaires
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# S'assurer que Farm est un facteur
train$Farm <- as.factor(train$Farm)
# Calculer la moyenne du poids par semaine et par ferme, avec .groups = "drop"
mean_weight <- train %>%
group_by(Farm, Age) %>%
summarise(moyenne_poids = mean(Weight, na.rm = TRUE), .groups = "drop")
# Choisir une palette de couleurs bien contrastées
ferme_colors <- brewer.pal(7, "Set1")  # "Set1" est une palette de couleurs discrètes bien distinctes
# Tracer les courbes de croissance avec des couleurs personnalisées
ggplot(mean_weight, aes(x = Age, y = moyenne_poids, color = Farm)) +
geom_line() +
geom_point() +
scale_color_manual(values = ferme_colors) +  # Utilise les couleurs définies
labs(title = "Courbe de croissance des cochons par ferme", x = "Semaine", y = "Poids moyen") +
theme_minimal()
print(desc_stats)
# Statistiques descriptives
desc_stats <- data %>%
group_by(Farm, Weight) %>%
summarise(
moyenne = mean(Weight, na.rm = TRUE),
mediane = median(Weight, na.rm = TRUE),
ecart_type = sd(Weight, na.rm = TRUE),
min = min(Weight, na.rm = TRUE),
max = max(Weight, na.rm = TRUE)
)
# Charger les bibliothèques nécessaires
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# S'assurer que Farm est un facteur
train$Farm <- as.factor(train$Farm)
# Calculer la moyenne du poids par semaine et par ferme, avec .groups = "drop"
mean_weight <- train %>%
group_by(Farm, Age) %>%
summarise(moyenne_poids = mean(Weight, na.rm = TRUE), .groups = "drop")
# Choisir une palette de couleurs bien contrastées
ferme_colors <- brewer.pal(7, "Set1")  # "Set1" est une palette de couleurs discrètes bien distinctes
# Tracer les courbes de croissance avec des couleurs personnalisées
ggplot(mean_weight, aes(x = Age, y = moyenne_poids, color = Farm)) +
geom_line() +
geom_point() +
scale_color_manual(values = ferme_colors) +  # Utilise les couleurs définies
labs(title = "Courbe de croissance des cochons par ferme", x = "Semaine", y = "Poids moyen") +
theme_minimal()
# Statistiques descriptives
desc_stats <- data %>%
group_by(Farm, Weight) %>%
summarise(
moyenne = mean(Weight, na.rm = TRUE),
mediane = median(Weight, na.rm = TRUE),
ecart_type = sd(Weight, na.rm = TRUE),
min = min(Weight, na.rm = TRUE),
max = max(Weight, na.rm = TRUE)
)
# Statistiques descriptives
desc_stats <- train %>%
group_by(Farm, Weight) %>%
summarise(
moyenne = mean(Weight, na.rm = TRUE),
mediane = median(Weight, na.rm = TRUE),
ecart_type = sd(Weight, na.rm = TRUE),
min = min(Weight, na.rm = TRUE),
max = max(Weight, na.rm = TRUE)
)
desc_stats <- dataset %>%
group_by(Farm) %>%
summarise(
moyenne = mean(Weight, na.rm = TRUE),
mediane = median(Weight, na.rm = TRUE),
ecart_type = sd(Weight, na.rm = TRUE),
min = min(Weight, na.rm = TRUE),
max = max(Weight, na.rm = TRUE),
.groups = "drop"  # Désactive le regroupement après summarise()
)
desc_stats <- train %>%
group_by(Farm) %>%
summarise(
moyenne = mean(Weight, na.rm = TRUE),
mediane = median(Weight, na.rm = TRUE),
ecart_type = sd(Weight, na.rm = TRUE),
min = min(Weight, na.rm = TRUE),
max = max(Weight, na.rm = TRUE),
.groups = "drop"  # Désactive le regroupement après summarise()
)
desc_stats <- train %>%
group_by(Farm) %>%
summarise(
moyenne = mean(Weight, na.rm = TRUE),
mediane = median(Weight, na.rm = TRUE),
ecart_type = sd(Weight, na.rm = TRUE),
min = min(Weight, na.rm = TRUE),
max = max(Weight, na.rm = TRUE),
.groups = "drop"  # Désactive le regroupement après summarise()
)
print(desc_stats)
# Compter le nombre de cochons de chaque espèce par ferme
species_count <- train %>%
group_by(Farm, Species) %>%
summarise(count = n(), .groups = "drop")
print(species_count)
# Calculer le poids moyen par espèce et par ferme
species_weight_stats <- train %>%
group_by(Species) %>%
summarise(
poids_moyen = mean(Weight, na.rm = TRUE),
ecart_type = sd(Weight, na.rm = TRUE),
.groups = "drop"
)
print(species_weight_stats)
library(ggplot2)
ggplot(species_count, aes(x = Farm, y = count, fill = Species)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Nombre de cochons par espèce et par ferme", x = "Ferme", y = "Nombre de cochons") +
theme_minimal()
ggplot(species_count, aes(x = Farm, y = count, fill = Species)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Nombre de cochons par espèce et par ferme", x = "Ferme", y = "Nombre de cochons") +
theme_minimal()
# Calculer le poids moyen par espèce et par semaine (Age)
species_weight_evolution <- dataset %>%
group_by(Species, Age) %>%
summarise(
poids_moyen = mean(Weight, na.rm = TRUE),
.groups = "drop"
)
# Calculer le poids moyen par espèce et par semaine (Age)
species_weight_evolution <- train %>%
group_by(Species, Age) %>%
summarise(
poids_moyen = mean(Weight, na.rm = TRUE),
.groups = "drop"
)
ggplot(species_weight_evolution, aes(x = Age, y = poids_moyen, color = Species)) +
geom_line(size = 1) +           # Courbe pour chaque espèce
geom_point(size = 2) +          # Points pour chaque valeur
labs(
title = "Évolution du poids moyen des cochons par espèce",
x = "Semaine",
y = "Poids moyen"
) +
theme_minimal()
ggplot(species_weight_evolution, aes(x = Age, y = poids_moyen, color = Species)) +
geom_line(size = 1) +           # Courbe pour chaque espèce
geom_point(size = 2) +          # Points pour chaque valeur
scale_color_manual(values = ferme_colors) +
labs(
title = "Évolution du poids moyen des cochons par espèce",
x = "Semaine",
y = "Poids moyen"
) +
theme_minimal()
# Calculer le poids moyen par espèce et par semaine (Age)
species_weight_evolution <- train %>%
group_by(Species, Age) %>%
summarise(
poids_moyen = mean(Weight, na.rm = TRUE),
.groups = "drop"
)
# Choisir une palette de couleurs bien contrastées
ferme_colors <- brewer.pal(3, "Set1")
ggplot(species_weight_evolution, aes(x = Age, y = poids_moyen, color = Species)) +
geom_line(size = 1) +           # Courbe pour chaque espèce
geom_point(size = 2) +          # Points pour chaque valeur
scale_color_manual(values = ferme_colors) +
labs(
title = "Évolution du poids moyen des cochons par espèce",
x = "Semaine",
y = "Poids moyen"
) +
theme_minimal()
# Créer le graphique
ggplot(species_weight_evolution, aes(x = Age, y = poids_moyen, color = Species)) +
geom_line(size = 1) +           # Courbe pour chaque espèce
geom_point(size = 2) +          # Points pour chaque valeur
scale_color_manual(values = ferme_colors) +
labs(title = "Évolution du poids moyen des cochons par espèce",
x = "Semaine",
y = "Poids moyen") +
theme_minimal()
# Calculer le poids moyen par espèce et par semaine (Age)
species_weight_evolution <- train %>%
group_by(Species, Age) %>%
summarise(
poids_moyen = mean(Weight, na.rm = TRUE),
.groups = "drop"
)
# Choisir une palette de couleurs bien contrastées
# Assurez-vous d'avoir le bon nombre de couleurs en fonction des espèces
ferme_colors <- brewer.pal(n = length(unique(species_weight_evolution$Species)), name = "Set1")
# Créer le graphique
ggplot(species_weight_evolution, aes(x = Age, y = poids_moyen, color = Species)) +
geom_line(size = 1) +           # Courbe pour chaque espèce
geom_point(size = 2) +          # Points pour chaque valeur
scale_color_manual(values = ferme_colors) +
labs(title = "Évolution du poids moyen des cochons par espèce",
x = "Semaine",
y = "Poids moyen") +
theme_minimal()
# Charger les librairies nécessaires
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Vérifiez le nombre d'espèces uniques
unique_species <- unique(train$Species)
num_species <- length(unique_species)
# Calculer le poids moyen par espèce et par semaine (Age)
species_weight_evolution <- train %>%
group_by(Species, Age) %>%
summarise(
poids_moyen = mean(Weight, na.rm = TRUE),
.groups = "drop"
)
# Choisir une palette de couleurs bien contrastées
# Vérifiez si le nombre d'espèces est supérieur au nombre de couleurs disponibles
if(num_species > 8) {
stop("Le nombre d'espèces dépasse le nombre de couleurs disponibles dans la palette Set1.")
} else {
ferme_colors <- brewer.pal(n = num_species, name = "Set1")
}
# Créer le graphique
ggplot(species_weight_evolution, aes(x = Age, y = poids_moyen, color = Species)) +
geom_line(size = 1) +           # Courbe pour chaque espèce
geom_point(size = 2) +          # Points pour chaque valeur
scale_color_manual(values = ferme_colors) +
labs(title = "Évolution du poids moyen des cochons par espèce",
x = "Semaine",
y = "Poids moyen") +
theme_minimal()
# Charger les librairies nécessaires
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Vérifiez que la variable Species est un facteur
train$Species <- as.factor(train$Species)
# Calculer le poids moyen par espèce et par semaine (Age)
species_weight_evolution <- train %>%
group_by(Species, Age) %>%
summarise(
poids_moyen = mean(Weight, na.rm = TRUE),
.groups = "drop"
)
# Choisir une palette de couleurs bien contrastées
ferme_colors <- brewer.pal(n = length(unique(species_weight_evolution$Species)), name = "Set1")
# Créer le graphique
ggplot(species_weight_evolution, aes(x = Age, y = poids_moyen, color = Species)) +
geom_line(size = 1) +           # Courbe pour chaque espèce
geom_point(size = 2) +          # Points pour chaque valeur
scale_color_manual(values = ferme_colors) +
labs(title = "Évolution du poids moyen des cochons par espèce",
x = "Semaine",
y = "Poids moyen") +
theme_minimal()
summary(train)
# Créer le graphique
ggplot(species_count, aes(x = Farm, y = count, fill = Species)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = ferme_colors) + # Utilisation de la palette de couleurs personnalisée
labs(title = "Nombre de cochons par espèce et par ferme",
x = "Ferme",
y = "Nombre de cochons") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotation des étiquettes de l'axe x pour une meilleure lisibilité
# Compter le nombre de cochons de chaque espèce par ferme
species_count <- train %>%
group_by(Farm, Species) %>%
summarise(count = n(), .groups = "drop")
# Choisir une palette de couleurs bien contrastées
# Vous pouvez choisir une palette de couleurs avec plus de couleurs si nécessaire
ferme_colors <- brewer.pal(n = length(unique(species_count$Species)), name = "Set2")
# Créer le graphique
ggplot(species_count, aes(x = Farm, y = count, fill = Species)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = ferme_colors) + # Utilisation de la palette de couleurs personnalisée
labs(title = "Nombre de cochons par espèce et par ferme",
x = "Ferme",
y = "Nombre de cochons") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotation des étiquettes de l'axe x pour une meilleure lisibilité
# Calculer le poids moyen par espèce et par ferme
species_weight_stats <- train %>%
group_by(Species) %>%
summarise(
poids_moyen = mean(Weight, na.rm = TRUE),
ecart_type = sd(Weight, na.rm = TRUE),
.groups = "drop"
)
print(species_weight_stats)
# Calculer le poids moyen par espèce et par ferme
species_weight_stats <- train %>%
group_by(Species) %>%
summarise(
poids_moyen = mean(Weight, na.rm = TRUE),
ecart_type = sd(Weight, na.rm = TRUE),
.groups = "drop"
)
print(species_weight_stats)
# Vérifiez que la variable Species est un facteur
train$Species <- as.factor(train$Species)
# Calculer le poids moyen par espèce et par semaine (Age)
species_weight_evolution <- train %>%
group_by(Species, Age) %>%
summarise(
poids_moyen = mean(Weight, na.rm = TRUE),
.groups = "drop"
)
# Choisir une palette de couleurs bien contrastées
ferme_colors <- brewer.pal(n = length(unique(species_weight_evolution$Species)), name = "Set1")
# Créer le graphique
ggplot(species_weight_evolution, aes(x = Age, y = poids_moyen, color = Species)) +
geom_line(size = 1) +           # Courbe pour chaque espèce
geom_point(size = 2) +          # Points pour chaque valeur
scale_color_manual(values = ferme_colors) +
labs(title = "Évolution du poids moyen des cochons par espèce",
x = "Semaine",
y = "Poids moyen") +
theme_minimal()
library(RColorBrewer)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
# Charger les librairies nécessaires
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# import data
train <- read.csv("~/Documents/M2QF/MOSA/Projet_Pig_data/pig_data_proj/train1.csv")
test <- read.csv("~/Documents/M2QF/MOSA/Projet_Pig_data/pig_data_proj/test1.csv")
head(train)
colSums(is.na(train))
boxplot(Weight ~ Farm, data = train, main = "Distribution des poids par ferme")
boxplot(Weight ~ Farm, data = train, main = "Distribution des poids par ferme")
# Charger les bibliothèques nécessaires
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# S'assurer que Farm est un facteur
train$Farm <- as.factor(train$Farm)
# Calculer la moyenne du poids par semaine et par ferme, avec .groups = "drop"
mean_weight <- train %>%
group_by(Farm, Age) %>%
summarise(moyenne_poids = mean(Weight, na.rm = TRUE), .groups = "drop")
# Choisir une palette de couleurs bien contrastées
ferme_colors <- brewer.pal(7, "Set1")  # "Set1" est une palette de couleurs discrètes bien distinctes
# Tracer les courbes de croissance avec des couleurs personnalisées
ggplot(mean_weight, aes(x = Age, y = moyenne_poids, color = Farm)) +
geom_line() +
geom_point() +
scale_color_manual(values = ferme_colors) +  # Utilise les couleurs définies
labs(title = "Courbe de croissance des cochons par ferme", x = "Semaine", y = "Poids moyen") +
theme_minimal()
desc_stats <- train %>%
group_by(Farm) %>%
summarise(
moyenne = mean(Weight, na.rm = TRUE),
mediane = median(Weight, na.rm = TRUE),
ecart_type = sd(Weight, na.rm = TRUE),
min = min(Weight, na.rm = TRUE),
max = max(Weight, na.rm = TRUE),
.groups = "drop"  # Désactive le regroupement après summarise()
)
print(desc_stats)
# Compter le nombre de cochons de chaque espèce par ferme
species_count <- train %>%
group_by(Farm, Species) %>%
summarise(count = n(), .groups = "drop")
# Choisir une palette de couleurs bien contrastées
# Vous pouvez choisir une palette de couleurs avec plus de couleurs si nécessaire
ferme_colors <- brewer.pal(n = length(unique(species_count$Species)), name = "Set2")
# Créer le graphique
ggplot(species_count, aes(x = Farm, y = count, fill = Species)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = ferme_colors) + # Utilisation de la palette de couleurs personnalisée
labs(title = "Nombre de cochons par espèce et par ferme",
x = "Ferme",
y = "Nombre de cochons") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotation des étiquettes de l'axe x pour une meilleure lisibilité
# Vérifiez que la variable Species est un facteur
train$Species <- as.factor(train$Species)
# Compter le nombre de cochons de chaque espèce par ferme
species_count <- train %>%
group_by(Farm, Species) %>%
summarise(count = n(), .groups = "drop")
# Choisir une palette de couleurs bien contrastées
# Vous pouvez choisir une palette de couleurs avec plus de couleurs si nécessaire
ferme_colors <- brewer.pal(n = length(unique(species_count$Species)), name = "Set2")
# Créer le graphique
ggplot(species_count, aes(x = Farm, y = count, fill = Species)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = ferme_colors) + # Utilisation de la palette de couleurs personnalisée
labs(title = "Nombre de cochons par espèce et par ferme",
x = "Ferme",
y = "Nombre de cochons") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotation des étiquettes de l'axe x pour une meilleure lisibilité
# Calculer le poids moyen par espèce et par ferme
species_weight_stats <- train %>%
group_by(Species) %>%
summarise(
poids_moyen = mean(Weight, na.rm = TRUE),
ecart_type = sd(Weight, na.rm = TRUE),
.groups = "drop"
)
print(species_weight_stats)
# Vérifiez que la variable Species est un facteur
train$Species <- as.factor(train$Species)
# Calculer le poids moyen par espèce et par semaine (Age)
species_weight_evolution <- train %>%
group_by(Species, Age) %>%
summarise(
poids_moyen = mean(Weight, na.rm = TRUE),
.groups = "drop"
)
# Choisir une palette de couleurs bien contrastées
ferme_colors <- brewer.pal(n = length(unique(species_weight_evolution$Species)), name = "Set1")
# Créer le graphique
ggplot(species_weight_evolution, aes(x = Age, y = poids_moyen, color = Species)) +
geom_line(size = 1) +           # Courbe pour chaque espèce
geom_point(size = 2) +          # Points pour chaque valeur
scale_color_manual(values = ferme_colors) +
labs(title = "Évolution du poids moyen des cochons par espèce",
x = "Semaine",
y = "Poids moyen") +
theme_minimal()
setwd("~/Documents/M2QF/MOSA/Projet_Pig_data")
